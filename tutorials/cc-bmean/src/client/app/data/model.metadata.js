/**
 * CC Model Metadata by hand
 */
// ReSharper disable InconsistentNaming
(function() {
    'use strict';

    angular
        .module('app.data')
        .factory('model-metadata', metadata);

    metadata.$inject = ['breeze'];

    function metadata(breeze) {

        // 'Identity' is the default key generation strategy for this app
        var keyGen = breeze.AutoGeneratedKeyType.Identity;
        // namespace of the corresponding classes on the server
        var namespace = 'CC.Model';

        // Breeze Labs: breeze.metadata.helper.js
        // https://github.com/IdeaBlade/Breeze/blob/master/Breeze.Client/Scripts/Labs/breeze.metadata-helper.js
        // The helper reduces data entry by applying common conventions
        // and converting common abbreviations (e.g., 'type' -> 'dataType')
        var helper = new breeze.config.MetadataHelper(namespace, keyGen);

        /*** Convenience fns and vars ***/
        var store; // the metadataStore that we'll be building

        // addType - make it easy to add the type to the store using the helper
        var addType = function(type) {
            helper.addTypeToStore(store, type);
        };

        // DataTypes
        var DT = breeze.DataType;
        var BOOL = DT.Boolean;
        var DATE = DT.DateTime;
        var ID = DT.Int32;

        return {
            fillMetadataStore: fillMetadataStore
        };

        /**** IMPLEMENTATION DETAILS ***/

        function fillMetadataStore(metadataStore) {
            store = metadataStore;

            // Add types in alphabetical order ... because we can
            addPerson();
            addSession();
            addRoom();
            addTimeSlot();
            addTrack();
        }

        function addPerson() {
            addType({
                name: 'Person',
                dataProperties: {
                    id: {type: ID},
                    firstName: {max: 50, nullOk: false},
                    lastName: {max: 50, nullOk: false},
                    // could add validators here; let model.validation add them
                    email: {max: 400},
                    blog: {max: 400},
                    twitter: {max: 400},
                    gender: {max: 1},
                    imageSource: {max: 400},

                    // could let Breeze add unmapped but we do so to lock in the Boolean data type
                    isPartial: {type: BOOL, nullOk: false, isUnmapped: true},
                    isSpeaker: {type: BOOL, nullOk: false, isUnmapped: true}
                },

                navigationProperties: {
                    speakerSessions: {type: 'Session', hasMany: true}
                }
            });
        }

        function addSession() {
            addType({
                name: 'Session',
                dataProperties: {
                    id: {type: ID},
                    title: {max: 50, nullOk: false},
                    code: {max: 10},
                    description: {max: 4000},
                    level: {max: 30},
                    tags: {max: 4000},

                    roomId: {type: ID, nullOk: false},
                    speakerId: {type: ID, nullOk: false},
                    timeSlotId: {type: ID, nullOk: false},
                    trackId: {type: ID, nullOk: false},

                    isPartial: {type: BOOL, nullOk: false, isUnmapped: true}
                },

                // Let model.validation add the requireReferenceEntity validators
                navigationProperties: {
                    room: 'Room',
                    speaker: 'Person',
                    timeSlot: 'TimeSlot',
                    track: 'Track'
                }

            });
        }

        function addRoom() {
            addType({
                name: 'Room',
                dataProperties: {
                    id: {type: ID},
                    name: {max: 50, nullOk: false}
                }
            });
        }

        function addTimeSlot() {
            addType({
                name: 'TimeSlot',
                dataProperties: {
                    id: {type: ID},
                    start: {type: DATE, nullOk: false},
                    isSessionSlot: {type: BOOL, nullOk: false},
                    duration: {type: ID, nullOk: false}
                }
            });
        }

        function addTrack() {
            addType({
                name: 'Track',
                dataProperties: {
                    id: {type: ID},
                    name: {max: 50, nullOk: false}
                }
            });
        }
    }
})();